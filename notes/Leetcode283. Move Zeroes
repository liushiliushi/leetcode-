
# 链接
[link](https://leetcode.com/problems/move-zeroes/description/)
# 思路
用c语言会很麻烦吧，可能还需要自己写一个或几个函数
人生苦短，我用python
遇到是0的元素直接删除，然后记录有多少个0.最后在数组后面加上就行。貌似不难。**这里的坑就是，删除后数组会改变**。以前遇到过这个问题。
enumerate()函数的枚举对象虽然改变了，但是index++是不变的。所以会出现**以下这种情况**

```python
nums = [1,2,3,4,5,6]
for index,num in enumerate(nums):
    del nums[index]
    print(list(enumerate(nums)))
print(nums)
```
输出
>[(0, 2), (1, 3), (2, 4), (3, 5), (4, 6)]
[(0, 2), (1, 4), (2, 5), (3, 6)]
[(0, 2), (1, 4), (2, 6)]
[2, 4, 6]


不管迭代对象变了没，总是第一次对第0个，第二次对第1个，第三次对第2个。。。。。。
所以要换一种别的方法。
# python
## 1.
```python
class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        i = 0
        zeroes = 0
        # 当还没到最后一个元素时
        while i < len(nums) :
            if nums[i] == 0:
                del nums[i]
                zeroes += 1
                # 注意这里i不变
            else:
                i += 1
        
        for i in range(zeroes):
            nums.append(0)
        
```
## 2.
还有一种思路就是双指针
前面走，后面改.

```python
class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        back = 0 
        for front in range(len(nums)):
            if nums[front] != 0:
                nums[back] = nums[front]
                back += 1
        for i in range(back,len(nums)):
            nums[i] = 0
```
这么写时间变短了
# javascript

```js
/**
 * @param {number[]} nums
 * @return {void} Do not return anything, modify nums in-place instead.
 */
var moveZeroes = function(nums) {
    let index = 0;
    for(let i = 0; i < nums.length; i++){
        if(nums[i] != 0){
            nums[index++] = nums[i];
        }
    }
    for(let i = index; i < nums.length; i++){
        nums[i] = 0;
    }
};
```
