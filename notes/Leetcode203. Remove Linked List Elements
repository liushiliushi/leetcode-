
# 链接
[link](https://leetcode.com/problems/remove-linked-list-elements/description/)
# 思路
链表的基本操作。这里需要注意的是，如果在一个函数里，改变链表，原链表并没有改变。所以需要*返回*一个新链表。
# c
这里有个问题，我不知道题目中head的结点是否储存元素，或者他只是个空的。
不过试了试，head也储存数字的。
C语言真的，太难写了。还得写上注释自己才能明白过来orz。
啊
debug 
还得
用好久
**注意**：随时赋值NULL

```c
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */


struct ListNode* removeElements(struct ListNode* head, int val){
    struct ListNode *currentPtr = head; //指向原链表当前结点
    struct ListNode *head1 = NULL, *currentPtr1 = NULL, *lastPtr1 = NULL;
    //找到head1
    while(lastPtr1 == NULL && currentPtr != NULL)
    {
        if(currentPtr->val != val)
        {
            head1 = malloc(sizeof(struct ListNode));
            head1->val = currentPtr->val;//为headptr赋值
            head1->next = NULL;
            lastPtr1 = head1;//为lastptr赋值
            
        }
        currentPtr = currentPtr->next;//current后移
    }
    while(currentPtr != NULL)//遍历所有原链表元素
    {
        if(currentPtr->val != val)
        {
            //开辟赋值
            currentPtr1 = malloc(sizeof(struct ListNode));
            currentPtr1->val = currentPtr->val;
            //连接
            if(lastPtr1 != NULL)
            {
                lastPtr1->next = currentPtr1;
                currentPtr1->next = NULL;
                lastPtr1 = currentPtr1;
            }
            
        }
        currentPtr = currentPtr->next;
    }
    return head1;
}
c语言真的非常快，只用了8ms。

```

# python
虚拟结点避免特殊操作，但是都加了个next，好像也挺麻烦的。
直接把答案重打了一遍。这里没有新建一个链表，直接在原链表上操作。因为这里是对象，可以更改保存其属性。但是c那里，是一个数据结构，不会改变。(除非知道其地址)
```python
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def removeElements(self, head: ListNode, val: int) -> ListNode:
        prev = ListNode(0)
        prev.next = head
        cur = prev
        while cur.next:
            if cur.next.val == val:
                cur.next = cur.next.next
            else:
                cur = cur.next
        return prev.next
```

